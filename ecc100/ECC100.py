#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        ECC100.py
#
#  Project :     dev-maxiv-ecc100
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      mikel.eguiraun$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["ECC100", "ECC100Class", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(ECC100.additionnal_import) ENABLED START -----#
import libecc100.libECC100
#----- PROTECTED REGION END -----#	//	ECC100.additionnal_import

# Device States Description
# No states for this device


class ECC100 (PyTango.Device_4Impl):
    """Device server for the Attocube ECC100 motion controller"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(ECC100.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	ECC100.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        ECC100.init_device(self)
        #----- PROTECTED REGION ID(ECC100.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	ECC100.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(ECC100.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	ECC100.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_PositionAxis0_read = 0.0
        self.attr_PositionAxis1_read = 0.0
        self.attr_PositionAxis2_read = 0.0
        self.attr_Axis0Connected_read = False
        self.attr_Axis1Connected_read = False
        self.attr_Axis2Connected_read = False
        #----- PROTECTED REGION ID(ECC100.init_device) ENABLED START -----#
        self.ecc100 = libecc100.libECC100.ECC100(self.Host)
        self.set_state(PyTango.DevState.ON)
        #----- PROTECTED REGION END -----#	//	ECC100.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(ECC100.always_executed_hook) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	ECC100.always_executed_hook

    # -------------------------------------------------------------------------
    #    ECC100 read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_PositionAxis0(self, attr):
        self.debug_stream("In read_PositionAxis0()")
        #----- PROTECTED REGION ID(ECC100.PositionAxis0_read) ENABLED START -----#
        try:
            self.attr_PositionAxis0_read = self.ecc100.getPosition(0)
            attr.set_value(self.attr_PositionAxis0_read)
        except:
            self.ecc100.restart()
        #----- PROTECTED REGION END -----#	//	ECC100.PositionAxis0_read
        
    def write_PositionAxis0(self, attr):
        self.debug_stream("In write_PositionAxis0()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(ECC100.PositionAxis0_write) ENABLED START -----#
        try:
            self.ecc100.setPosition(0, data)
        except:
            self.ecc100.restart()
        #----- PROTECTED REGION END -----#	//	ECC100.PositionAxis0_write
        
    def read_PositionAxis1(self, attr):
        self.debug_stream("In read_PositionAxis1()")
        #----- PROTECTED REGION ID(ECC100.PositionAxis1_read) ENABLED START -----#
        try:
            self.attr_PositionAxis1_read = self.ecc100.getPosition(1)
            attr.set_value(self.attr_PositionAxis1_read)
        except:
            self.ecc100.restart()
        #----- PROTECTED REGION END -----#	//	ECC100.PositionAxis1_read
        
    def write_PositionAxis1(self, attr):
        self.debug_stream("In write_PositionAxis1()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(ECC100.PositionAxis1_write) ENABLED START -----#
        try:
            self.ecc100.setPosition(1, data)
        except:
            self.ecc100.restart()
        #----- PROTECTED REGION END -----#	//	ECC100.PositionAxis1_write
        
    def read_PositionAxis2(self, attr):
        self.debug_stream("In read_PositionAxis2()")
        #----- PROTECTED REGION ID(ECC100.PositionAxis2_read) ENABLED START -----#
        try:
            self.attr_PositionAxis2_read = self.ecc100.getPosition(2)
            attr.set_value(self.attr_PositionAxis2_read)
        except:
            self.ecc100.restart()
        #----- PROTECTED REGION END -----#	//	ECC100.PositionAxis2_read
        
    def write_PositionAxis2(self, attr):
        self.debug_stream("In write_PositionAxis2()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(ECC100.PositionAxis2_write) ENABLED START -----#
        try:
            self.ecc100.setPosition(2, data)
        except:
            self.ecc100.restart()
        #----- PROTECTED REGION END -----#	//	ECC100.PositionAxis2_write
        
    def read_Axis0Connected(self, attr):
        self.debug_stream("In read_Axis0Connected()")
        #----- PROTECTED REGION ID(ECC100.Axis0Connected_read) ENABLED START -----#
        try:
            self.attr_Axis0Connected_read = self.ecc100.axis_connected(0)
            attr.set_value(self.attr_Axis0Connected_read)
        except:
            self.ecc100.restart()
        #----- PROTECTED REGION END -----#	//	ECC100.Axis0Connected_read
        
    def read_Axis1Connected(self, attr):
        self.debug_stream("In read_Axis1Connected()")
        #----- PROTECTED REGION ID(ECC100.Axis1Connected_read) ENABLED START -----#
        try:
            self.attr_Axis1Connected_read = self.ecc100.axis_connected(1)
            attr.set_value(self.attr_Axis1Connected_read)
        except:
            self.ecc100.restart()
        #----- PROTECTED REGION END -----#	//	ECC100.Axis1Connected_read
        
    def read_Axis2Connected(self, attr):
        self.debug_stream("In read_Axis2Connected()")
        #----- PROTECTED REGION ID(ECC100.Axis2Connected_read) ENABLED START -----#
        try:
            self.attr_Axis2Connected_read = self.ecc100.axis_connected(2)
            attr.set_value(self.attr_Axis2Connected_read)
        except:
            self.ecc100.restart()
        #----- PROTECTED REGION END -----#	//	ECC100.Axis2Connected_read
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(ECC100.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	ECC100.read_attr_hardware


    # -------------------------------------------------------------------------
    #    ECC100 command methods
    # -------------------------------------------------------------------------
    

    #----- PROTECTED REGION ID(ECC100.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	ECC100.programmer_methods

class ECC100Class(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(ECC100.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	ECC100.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'Host':
            [PyTango.DevString, 
             '',
            [] ],
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        'PositionAxis0':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'PositionAxis1':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'PositionAxis2':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'Axis0Connected':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'Axis1Connected':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'Axis2Connected':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(ECC100Class, ECC100, 'ECC100')
        #----- PROTECTED REGION ID(ECC100.add_classes) ENABLED START -----#
        #----- PROTECTED REGION END -----#	//	ECC100.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
